{
  "version": 3,
  "sources": ["../../src/image/image.ts", "../../src/components.ts/toolbar.ts", "../../src/components.ts/sprite-canvas.ts", "../../src/components.ts/timeline.ts", "../../src/components.ts/app-component.ts", "../../src/app.ts"],
  "sourcesContent": ["export class Image {\n  name: string;\n\n  constructor(path: string, name: string) {\n    // load image from path, and add to the dom\n    // see Hell's example code\n\n    this.name = name;\n  }\n\n  get pixels(): Array<number> {\n    // get image's pixels from the main canvas\n  }\n\n  set pixels(newPixels: Array<number>) {\n    // set image's pixels on the main canvas\n  }\n\n  // etc\n};\n", "export class Toolbar implements Component {\n    private position: 'left' | 'right';\n    private content: string;\n    static id = `toolbar`;\n\n    constructor(position: 'left' | 'right', content: string) {\n        this.position = position;\n        this.content = content;\n    }\n\n    render(): HTMLElement {\n        const style = document.createElement('style');\n        style.textContent = `\n        .${Toolbar.id}-${this.position} {\n            grid-area: ${this.position};\n            background: #fff;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            ${this.position === 'right' ? 'margin-left: 0.5rem;' : 'margin-right: 0.5rem;'}\n            padding: 1rem;\n            border-radius: 10px;\n        }\n        `;\n        document.head.appendChild(style);\n\n        const toolbar = document.createElement('div');\n        toolbar.className = `toolbar-${this.position}`;\n        toolbar.innerHTML = `<p>${this.content}</p>`;\n        return toolbar;\n    }\n}", "export class SpriteCanvas implements Component {\n    private content: string;\n    static id = `sprite-canvas`;\n\n    constructor(content: string) {\n        this.content = content;\n    }\n\n    render(): HTMLElement {\n        const style = document.createElement('style');\n        style.textContent = `\n        .${SpriteCanvas.id} {\n            grid-area: canvas;\n            height: auto;\n            background: #ffffff;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 1rem;\n            border-radius: 10px;\n          }\n        `;\n        document.head.appendChild(style);\n        \n        const canvas = document.createElement('div');\n        canvas.className = SpriteCanvas.id;\n        canvas.innerHTML = `<p>${this.content}</p>`;\n        return canvas;\n    }\n}", "export class Timeline implements Component {\n    private content: string;\n    static id = `timeline`;\n\n    constructor(content: string) {\n        this.content = content;\n    }\n\n    render(): HTMLElement {\n        const style = document.createElement('style');\n        style.textContent = `\n        .${Timeline.id} {\n            grid-column: span 3;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            background: #fff;\n            display: flex;\n            margin-top: 0.5rem;\n            padding: 1rem;\n            border-radius: 10px;\n        }\n        `;\n        document.head.appendChild(style);\n\n        const timeline = document.createElement('div');\n        timeline.className = Timeline.id;\n        timeline.innerHTML = `<p>${this.content}</p>`;\n        return timeline;\n    }\n}", "export class AppComponent implements Component {\n    private children: HTMLElement[] = [];\n    static id = `app-component`;\n\n    constructor(content: string, children: HTMLElement[] = []) {\n        this.content = content;\n        this.children = children; \n    }\n\n    render(): HTMLElement {\n        const style = document.createElement('style');\n        style.textContent = `\n        .${AppComponent.id} {\n            display: grid;\n            grid-template-areas: \n                \"left canvas right\";\n            grid-template-columns: 1fr 3fr 1fr;\n            grid-template-rows: 80% auto;\n            height: calc(100vh - 1rem);\n            width: 100%;\n            border-radius: 10px;\n        }\n        `;\n        document.head.appendChild(style);\n        \n        const app = document.createElement('div');\n        app.className = AppComponent.id;\n\n        this.children.forEach(child => {\n            app.appendChild(child);\n        });\n\n        return app;\n    }\n}\n", "import { Image } from './image/image.ts';\nimport { Toolbar } from './components.ts/toolbar.ts';\nimport { SpriteCanvas } from \"./components.ts/sprite-canvas.ts\";\nimport { Timeline } from \"./components.ts/timeline.ts\";\nimport { AppComponent } from \"./components.ts/app-component.ts\";\n\nconst init = async () => {\n  // handle all your on load setup here\n  const newImage = new Image('<put path here>', '<put name here>'); \n    // will be useful in the future\n    // window.alert(`\n    //   here is where you would implement image uploading, \n    //   which will give you a path, \n    //   which you use in the constructor of the image,\n    //   which will have the name ${newImage.name}\n    // `);\n  };\n\n\n  const app = document.getElementById('app');\n\n  if (app) {\n    app.appendChild(new AppComponent('', [\n      new Toolbar('left', 'Toolbar').render(),\n      new Toolbar('right', 'Toolbar').render(),\n      new SpriteCanvas(\"Canvas\").render(),\n      new Timeline(\"Timeline\").render(),\n    ]).render());\n  }\n\nif(document.readyState !== 'loading') {\n  init()\n    .then(console.log);\n} else {\n  window.addEventListener(\"DOMContentLoaded\", init);\n}\n"],
  "mappings": "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",
  "names": ["app"]
}
